package com.choi.petairbnb2;


import com.codename1.braintree.Purchase;
import com.codename1.contacts.Contact;
import com.codename1.db.Database;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.Log;
import com.codename1.io.Storage;
import com.codename1.properties.SQLMap;
import com.codename1.properties.UiBinding;
import com.codename1.system.NativeInterface;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.LinkedHashMap;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class Homescreen {

    private Form current;
    private String url = "http://kjc.ma1geek.org/test.php";
    private String tempText;
    JSONParser json;
    private JSONObject bb, id;
    private Resources theme;
    private Label first , last ,ad, ads, z, ct, st, country1;
    private TextField txtFirst,txtLast, firstn, lastn, ad1, ad2, zip, city, state1, country;
    private Button forward,make, pay, submit, listingB, list2, gmapdemo, name;
    private Container panela,panelb,panelba,panel3, panel2, panel4;
    private int x;
    private Image milton;
    ConnectionRequest r;
    LinkedHashMap<Integer,Object> userArrayMap=new LinkedHashMap<>();
    LinkedHashMap<Integer,Object> userData=new LinkedHashMap<>();
    ArrayList userArray;
    ReadParseJson q;
    PayForm p;
    Resources res1;
    ListingForm formL;
    ListingDetails listDTL;
    ArrayList<String> dt;
    GMAPS gmap;
    private Database db;
    SQLMap sm;
    Contact myContact;
    Contact contact;
    UiBinding uib = new UiBinding();
    Contact c = new Contact();
   





    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");
        //Contact cont  = new Contact().getPropertyIndex().registerExternalizable();
        Toolbar.setGlobalToolbar(true);
        Log.bindCrashProtection(true);


        //            c.name.set("Ryan");
//            c.email.set("seokmin_choi19@milton.edu");
//            c.phone.set("617-678-3248");
//            c.rank.set(1);
//            db = Display.getInstance().openOrCreate("propertiesdemo.db");
//            sm = SQLMap.create(db);
//            sm.setPrimaryKeyAutoIncrement(c, c.id);
//            sm.insert(c);
//
//            Storage.getInstance().writeObject("MyContact", c);
//
//
//            Contact readContact = (Contact)Storage.getInstance().readObject("MyContact");
//            //username = new Label(readContact.name.toString());
//            System.out.println(readContact.name.toString());
//            name = new Button(readContact.name.toString());


//            Log.p("My name is: " + c.name.get());


        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }

        Form main = new Form("Search", BoxLayout.y());
        Form pay1 = new Form("Payment", BoxLayout.y());
        Form listing = new Form("Listings Around You", BoxLayout.y());
        Form listingDetails = new Form("Details", BoxLayout.y());



        Toolbar tb = main.getToolbar();
        Toolbar t1 = pay1.getToolbar();

        //Image icon = theme.getImage("user.png");
//        Container topBar = BorderLayout.east(new Label());
//        Container topB1 = BorderLayout.east(new Label());
//        q = new ReadParseJson();
//        dt = q.ReadParseJson();
        pay= new Button("Payment");
        p = new PayForm();
        formL = new ListingForm();




        //Log.p("My name is: " + contact.name.get());




        listDTL = new ListingDetails();
        gmap = new GMAPS();
        submit = new Button("Submit");
        listingB = new Button("Listings");
        gmapdemo = new Button("GMAP DEMO");
        list2 = new Button("Listing 1");
        firstn = new TextField();
        lastn = new TextField();
        ad1 = new TextField();
        ad2 = new TextField();
        zip = new TextField();
        city = new TextField();
        state1 = new TextField();
        country = new TextField();


//
//        firstn.setText(firstn.getText());
//        firstn.addActionListener(e -> myContact.name.set(firstn.getText()));


        //uib.bind(contact.name, firstn);

        //Store contacts
        Storage.getInstance().writeObject("MyContact", contact);

        Contact readContact = (Contact)Storage.getInstance().readObject("MyContact");




        //Initialize containers

        panela=new Container();
        panelb=new Container();
        panelba=new Container();
        panel2 = new Container();
        panel3 = new Container();
        panel4 = new Container();



        /*
        try {
            milton= Image.createImage("/mpic.jpg");
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        img= new Label("PIC"){
                    @Override
                    public void paint(Graphics g) {
                        // red color
                        //  g.setColor(0xff0000);
                        g.drawImage(milton,this.getX(),this.getY(),this.getWidth(),this.getHeight());
                        g.drawString("Hales", 10,10);

                        // paint the screen in red
                        // g.fillRect(getX(), getY(), 20,20);

                        // draw main world in white text at the top left corner of the screen
                        //  g.setColor(0xFF9933);
                        if(x>0) {
                            g.drawString(team[0].first, (this.getWidth() / 2) - 20, getY() + this.getHeight() / 2);
                        }
            }
        };

*/

        panela.setLayout(BoxLayout.y());
        panela.add(pay);
        panela.add(listingB);
        panela.add(gmapdemo);
        panel2.setLayout(new GridLayout(11, 2));
        panel3.setLayout(BoxLayout.y());
        panel4.setLayout(BoxLayout.y());


        //Input for Payment labels
        first = new Label("First Name");
        last = new Label("Last");
        ad = new Label("Address 1");
        ads = new Label("Address 2");
        z = new Label("Zipcode");
        ct = new Label("City");
        st = new Label("State");
        country1 = new Label("Country");



        //put labels and textfield in main page
        panel2.add(first);
        panel2.add(firstn);
        panel2.add(last);
        panel2.add(lastn);
        panel2.add(ad);
        panel2.add(ad1);
        panel2.add(ads);
        panel2.add(ad2);
        panel2.add(z);
        panel2.add(zip);
        panel2.add(ct);
        panel2.add(city);
        panel2.add(st);
        panel2.add(state1);
        panel2.add(country1);
        panel2.add(country);




        panel2.add(submit);




        panel3.add(list2);





        pay1.add(panel2);

        listing.add(panel3);

        listingDetails.add(panel4);


        String fname = firstn.getText();
        String lname = lastn.getText();
        String address = ad1.getText();
        String address2 = ad2.getText();
        String zipc = zip.getText();
        String state = state1.getText();
        String nation = country.getText();




        // ADD BACK COMMAND FUNCATIONALITY
        Command backcomm = new Command("Back"){

            @Override
            public void actionPerformed(ActionEvent evt) {
                main.showBack();
            }

        };


        pay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                test();
                //pay1.show();
                //pay1.addCommand(backcomm);

            }
        });


        listingB.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                listing.show();
                listing.addCommand(backcomm);
            }
        });


        list2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                listingDetails.show();
                listingDetails.addCommand(backcomm);
            }
        });







        panelb.setLayout(new GridLayout(2,1));
        panelb.add(panelba);


//        for(int i = 0; i< dt.size();i++){
//            panela.add(dt.get(i));
//        }






        main.setLayout(new GridLayout(2,1));

        main.addComponent(panela);
        main.addComponent(panelb);



       /* Image duke = null;
        try {
            duke = Image.createImage("/user.png");
        } catch(IOException err) {
            Log.e(err);
        }
        int fiveMM = Display.getInstance().convertToPixels(5);
        final Image finalDuke = duke.scaledWidth(fiveMM);
        Toolbar.setGlobalToolbar(true);
*/




        /*topBar.add(BorderLayout.SOUTH, new Label("App Name","Sidemenu Tagline"));
        topBar.setUIID("SideCommand");
        //tb.addComponentToSideMenu(topBar);


        tb.addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {});
        tb.addMaterialCommandToSideMenu("Website", FontImage.MATERIAL_WEB, e ->{});
        tb.addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e ->{});
        tb.addMaterialCommandToSideMenu("About", FontImage.MATERIAL_INFO, e ->{});*/
        //tb.addMaterialCommandToSideMenu("Pay",FontImage.MATERIAL_PAYMENT, e ->{});


        main.show();






    }
    /*
    public  ArrayList testurl() {
        r = new ConnectionRequest();
        r.setUrl(url);
        r.setPost(false);
        r.setHttpMethod("GET");
        //r.addArgument("encoding", "json");
        NetworkManager.getInstance().addToQueueAndWait(r);
        JSONParser json = new JSONParser();
        Map data = null;


        try {

            data = json.parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData())));

        } catch (IOException e) {
            e.printStackTrace();
        }

        ArrayList user = (ArrayList)data.get("root");
        System.out.println(user);
        return user;

        //ArrayList first = (ArrayList) data.get("root");
        //System.out.println(first);
        //Object s = first.get(0);
        //System.out.println(s + "'");
    }

    public String getData(int x, String str){

        userArray=testurl();
        for(int y=0;y<userArray.size();y++){
            userArrayMap.put(y,userArray.get(y));
        }
        userData=(LinkedHashMap)userArrayMap.get(x);
        String s=(String)userData.get(str);
        return(s);
    }
*/



    public interface NativeCalls extends NativeInterface {
        void testVoid();
    }

    public void destroy() {
    }

    public void test(){
        Purchase.startOrder(new Purchase.Callback() {
            public String fetchToken() {
                // this method needs to return the token from the Brain tree server API.
                // You need to use this code to connect to your server or return the data
                // from a previous connection that fetched the token
                System.out.println("asdfff11111111");
                return "sandbox_tgbzx6kj_kppxf9cxfkbb8m3k";
            }

            public void onPurchaseSuccess(String nonce) {
                // this is a callback that will be invoked when the purchase succeeds
                System.out.println("asdf2304923429034");
            }

            public void onPurchaseFail(String errorMessage) {
                // this is a callback that will be invoked when the purchase fails
                System.out.println("123948203984234");
            }

            public void onPurchaseCancel() {
                // this is a callback that will be invoked when the purchase is canceled
                System.out.println("asdfff1234234230498AP");
            }
        });
    }


}
