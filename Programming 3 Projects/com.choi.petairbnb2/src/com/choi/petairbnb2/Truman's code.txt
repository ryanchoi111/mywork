package com.mycompany.myapp;

import static com.codename1.ui.CN.*;

import com.codename1.components.InfiniteProgress;
import com.codename1.components.MultiButton;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.ui.Component;
import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.ui.*;
import com.codename1.ui.Container;
import com.codename1.ui.Image;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Hashtable;
import java.util.ArrayList;
import com.codename1.ui.events.ActionListener;
import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;
import javax.xml.soap.Text;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class searchWithFilters {

    private Form current, home, details;
    private Resources theme;
    private String dbUrl= "http://marshalltestdb.ma1geek.org/testFile6.php";
    private String dbSizeUrl="http://marshalltestdb.ma1geek.org/testFile7.php";

    private Label content;
    private ArrayList<Button> userList;
    private ArrayList<MultiButton> userList2;
    private ArrayList<TextField> contentList;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);
    }

    public ArrayList testurl(int x)
    {
        ConnectionRequest req2=new ConnectionRequest();
        req2.setUrl(dbUrl);

        req2.setPost(false);
        req2.setHttpMethod("GET");
        req2.addArgument("encoding","json");
        //req2.addArgument("format","json");
        NetworkManager.getInstance().addToQueueAndWait(req2);
        JSONParser parser = new JSONParser();

        Map result=null;

        LinkedHashMap user1=null;
        LinkedHashMap user2=null;
        try {

            result =  parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req2.getResponseData())));
        } catch (IOException e) {
            e.printStackTrace();
        }

        ArrayList users=(ArrayList)result.get("User");

        return(users);
    }

    public int finddbSize()
    {
        int size;
        ConnectionRequest req2=new ConnectionRequest();
        req2.setUrl(dbSizeUrl);
        req2.setPost(false);
        req2.setHttpMethod("GET");
        req2.addArgument("encoding","json");
        NetworkManager.getInstance().addToQueueAndWait(req2);
        JSONParser parser = new JSONParser();
        Map dbSizeResult=null;
        try {
            dbSizeResult =  parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req2.getResponseData())));
        } catch (IOException e) {
            e.printStackTrace();
        }
        ArrayList userNum=(ArrayList)dbSizeResult.get("User");
        size=userNum.size();

        return(size);
    }

    public String getData(int x, String str){
        ArrayList userArray;
        userArray=testurl(0);
        LinkedHashMap<Integer,Object> userArrayMap=new LinkedHashMap<>();
        LinkedHashMap<Integer,Object> userData=new LinkedHashMap<>();
        for(int y=0;y<userArray.size();y++){
            userArrayMap.put(y,userArray.get(y));
        }
        userData=(LinkedHashMap)userArrayMap.get(x);
        String s=(String)userData.get(str);
        return(s);
    }

    public void btnPress(int x){
        System.out.println(x);
        System.out.println(contentList.get(x));
        details.removeAll();
        //details.add(content);
        details.add(contentList.get(x));
        details.show();
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }
        Toolbar.setGlobalToolbar(true);

        userList=new ArrayList<Button>();
        userList2=new ArrayList<MultiButton>();
        contentList=new ArrayList<TextField>();
        for(int x=0;x<finddbSize();x++)
        {
            int y=x;
            Button btn=new Button(getData(x,"firstName") + " " + getData(x,"lastName"));
            MultiButton btn2=new MultiButton();
            btn2.setTextLine1(getData(x, "firstName") + " " + getData(x, "lastName"));
            btn2.setTextLine2("B");
            TextField txt=new TextField(getData(y,"content"));
            txt.setSingleLineTextArea(false);
            txt.setEditable(false);
            btn.addActionListener(evt -> btnPress(y));
            btn2.addActionListener(evt -> btnPress(y));
            //btn.addActionListener(evt -> content1=new TextField(getData(y,"content")));
            userList.add(btn);
            userList2.add(btn2);
            contentList.add(txt);
        }

        details=new Form("Info");
        details.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        setBackCommand(details);

        home = new Form("Search", BoxLayout.y());
        //hi.add(new InfiniteProgress());
        Display.getInstance().scheduleBackgroundTask(()-> {
            Display.getInstance().callSerially(() -> {
                /*
                for(int x=0;x<userList.size();x++)
                {
                    home.addComponent(userList.get(x));
                }
                */

                for(int x=0;x<userList2.size();x++)
                {
                    home.addComponent(userList2.get(x));
                }

                /*
                MultiButton m = new MultiButton();
                m.setTextLine1("Name: Joe");
                m.setTextLine2("Rating: 5");
                MultiButton n = new MultiButton();
                n.setTextLine1("Name: Bill");
                n.setTextLine2("Rating: 4");
                hi.add(m);
                hi.add(n);
                */
                home.revalidate();
            });
        });
        home.getToolbar().addSearchCommand(e ->{
            String text = (String)e.getSource();
            if(text == null || text.length() == 0) {
                // clear search
                for(Component cmp : home.getContentPane()) {
                    cmp.setHidden(false);
                    cmp.setVisible(true);
                }
                home.getContentPane().animateLayout(150);
            } else {
                text = text.toLowerCase();
                for(Component cmp : home.getContentPane()) {
                    MultiButton mb = (MultiButton)cmp;
                    String line1 = mb.getTextLine1();
                    String line2 = mb.getTextLine2();
                    boolean show = line1 != null && line1.toLowerCase().indexOf(text) > -1 ||
                            line2 != null && line2.toLowerCase().indexOf(text) > -1;
                    mb.setHidden(!show);
                    mb.setVisible(show);
                }
                home.getContentPane().animateLayout(150);
            }
        },4);

        home.show();
    }

    protected void setBackCommand(Form f) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                home.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}