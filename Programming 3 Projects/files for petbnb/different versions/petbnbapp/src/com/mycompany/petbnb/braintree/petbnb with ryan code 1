package com.mycompany.petbnb;

import com.codename1.components.*;
import com.codename1.googlemaps.MapContainer;
import com.codename1.io.*;
import com.codename1.maps.BoundingBox;
import com.codename1.maps.Coord;
import com.codename1.maps.MapListener;
import com.codename1.processing.Result;
import com.codename1.ui.*;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.*;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static com.codename1.ui.ComponentSelector.$;

import com.codename1.components.FloatingActionButton;
import com.codename1.components.InteractionDialog;
import com.codename1.components.ToastBar;
import com.codename1.googlemaps.MapContainer;
import com.codename1.googlemaps.MapContainer.MapObject;
import com.codename1.io.Util;
import com.codename1.maps.BoundingBox;
import com.codename1.maps.Coord;
import com.codename1.maps.MapListener;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.SideMenuBar;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Rectangle;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;

//http://kjc.ma1geek.org/test.php
/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */


public class PetBnBApp {

    private static final String HTML_API_KEY = "AIzaSyBWeRU02YUYPdwRuMFyTKIXUbHjq6e35Gw";
    private Form current;
    private Resources theme;


    private Form home;
    Form main;

    private Label first , last ,img;
    private TextField txtFirst,txtLast;
    private Button forward,make, testCoordPositions;
    private Peep[] team;
    private Container panela,panelb,panelba,panelbb;
    private int x;
    private Image milton;
    private Coord coordinates = null;

    ArrayList<String> dt;
    ReadParseJson q;
    Container datapull;
    Button b;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature

        try {
            Resources theme = Resources.openLayered("/theme");
            UIManager.getInstance().setThemeProps(theme.getTheme(theme.getThemeResourceNames()[0]));
            Display.getInstance().setCommandBehavior(Display.COMMAND_BEHAVIOR_SIDE_NAVIGATION);
            UIManager.getInstance().getLookAndFeel().setMenuBarClass(SideMenuBar.class);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public Coord geocode(String fullAddress){
        String text="";
        Coord ret = null;
        try {
            final String link = "https://maps.googleapis.com/maps/api/geocode/json";
            // URL url = new URL(link + "?address=" + URLEncoder.encode(fullAddress, "UTF-8")+ "&sensor=false");
            // Open the Connection
            ConnectionRequest req = new ConnectionRequest();
            req.setPost(false);
            req.setUrl(link);
            req.addArgument("address", fullAddress);
            req.addArgument("key", HTML_API_KEY);


            //https://gist.github.com/ahmedengu/0869b8c0644eee0d57d3891bc51a00dc
            NetworkManager.getInstance().addToQueueAndWait(req);
            Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));
            if (response.get("results") != null) {
                ArrayList results = (ArrayList) response.get("results");
                if (results.size() > 0) {
                    LinkedHashMap location = (LinkedHashMap) ((LinkedHashMap) ((LinkedHashMap) results.get(0)).get("geometry")).get("location");
                    ret = new Coord((double) location.get("lat"), (double) location.get("lng"));



                }
            }
            return ret;

        }
        catch(Exception ex){
            Log.e(ex);
        }

        return null;



    }
    String[] searchLocations(String input) {
        try {
            if(input.length() > 0) {
                ConnectionRequest r = new ConnectionRequest();
                r.setPost(false);
                r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
                r.addArgument("key", HTML_API_KEY);
                r.addArgument("input", input);
                NetworkManager.getInstance().addToQueueAndWait(r);
                Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                String[] res = Result.fromContent(result).getAsStringArray("//description");
                return res;
            }
        } catch(Exception err) {
            Log.e(err);
        }
        return null;
    }

    MapContainer.MapObject sydney;
    public void start() {

        final String[] finalAddress = {""};
        System.out.println("HELLO HERE IT IS");
        System.out.println(geocode("1600 Amphitheatre Parkway, Mountain View, CA"));
        testCoordPositions = new Button("Move Spots");

        if (current != null) {
            current.show();
            return;
        }
        Form mapsform = new Form("Native Maps Test");
        main = new Form("Data spit", BoxLayout.y());
        q = new ReadParseJson();
        datapull = new Container();
        b= new Button("Search for Local Stay");
        dt = q.ReadParseJson();

        for (int i = 0; i < dt.size();i++){
            datapull.add(dt.get(i));
        }

        main.add(datapull);







        Button addLocation = new Button("Add Pin");
        mapsform.setLayout(new BorderLayout());
        final MapContainer cnt = new MapContainer(HTML_API_KEY);
        //final MapContainer cnt = new MapContainer();
        //42.3040009,-71.5040407
        cnt.setCameraPosition(new Coord(42.3040009, -71.5040407));//this breaks the code //because the Google map is not loaded yet

        cnt.addMapListener(new MapListener() {

            @Override
            public void mapPositionUpdated(Component source, int zoom, Coord center) {
                System.out.println("Map position updated: zoom=" + zoom + ", Center=" + center);
            }

        });

        cnt.addLongPressListener(e -> {
            System.out.println("Long press");
            ToastBar.showMessage("Received longPress at " + e.getX() + ", " + e.getY(), FontImage.MATERIAL_3D_ROTATION);
        });
        cnt.addTapListener(e -> {
            ToastBar.showMessage("Received tap at " + e.getX() + ", " + e.getY(), FontImage.MATERIAL_3D_ROTATION);
        });

        int maxZoom = cnt.getMaxZoom();
        System.out.println("Max zoom is " + maxZoom);
        Button btnMoveCamera = new Button("Move Camera");
        btnMoveCamera.addActionListener(e -> {
            cnt.setCameraPosition(new Coord(-33.867, 151.206));
        });
        Style s = new Style();
        s.setFgColor(0xff0000);
        s.setBgTransparency(0);
        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, 3);

        Button btnAddMarker = new Button("Add Marker");
        btnAddMarker.addActionListener(e -> {

            cnt.setCameraPosition(new Coord(41.889, -87.622));
            cnt.addMarker(EncodedImage.createFromImage(markerImg, false), cnt.getCameraPosition(), "Hi marker", "Optional long description", new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    System.out.println("Bounding box is " + cnt.getBoundingBox());
                    ToastBar.showMessage("You clicked the marker", FontImage.MATERIAL_PLACE);
                }
            });

        });

        Button btnAddPath = new Button("Add Path");
        btnAddPath.addActionListener(e -> {

            cnt.addPath(
                    cnt.getCameraPosition(),
                    new Coord(-33.866, 151.195), // Sydney
                    new Coord(-18.142, 178.431),  // Fiji
                    new Coord(21.291, -157.821),  // Hawaii
                    new Coord(37.423, -122.091)  // Mountain View
            );
        });


        Button panTo = new Button("Pan To");
       /* panTo.addActionListener(e -> {
            //bounds.extend(new google.maps.LatLng('66.057878', '-22.579047')); // Iceland
            //bounds.extend(new google.maps.LatLng('37.961952', '43.878878')); // Turkey

            Coord c1 = new Coord(42.3040432, -71.5045936);
            Coord c2 = new Coord(49.2577142, -123.1941149);
            //Coord center = new Coord(c1.getLatitude()/2 +  c2.getLatitude() / 2, c1.getLongitude()/2 + c2.getLongitude()/2 );
            Coord center = new Coord(49.1110928, -122.9414646);

            float zoom = cnt.getZoom();

            boolean[] finished = new boolean[1];
            cnt.addMapListener(new MapListener() {

                @Override
                public void mapPositionUpdated(Component source, int zoom, Coord c) {

                    if (Math.abs(c.getLatitude() - center.getLatitude()) > .001 || Math.abs(c.getLongitude() - center.getLongitude()) > .001) {
                        return;
                    }
                    finished[0] = true;
                    synchronized (finished) {
                        final MapListener fthis = this;
                        Display.getInstance().callSerially(() -> {
                            cnt.removeMapListener(fthis);
                        });
                        finished.notify();
                    }

                }

            });
            cnt.zoom(center, (int) zoom);
            while (!finished[0]) {
                Display.getInstance().invokeAndBlock(() -> {
                    while (!finished[0]) {
                        Util.wait(finished, 100);
                    }
                });
            }


            BoundingBox box = cnt.getBoundingBox();
            if (!box.contains(c1) || !box.contains(c2)) {
                while (!box.contains(c1) || !box.contains(c2)) {
                    if (!box.contains(c1)) {
                        System.out.println("Box " + box + " doesn't contain " + c1);
                    }
                    if (!box.contains(c1)) {
                        System.out.println("Box " + box + " doesn't contain " + c2);
                    }
                    zoom -= 1;
                    final boolean[] done = new boolean[1];

                    final int fzoom = (int) zoom;
                    cnt.addMapListener(new MapListener() {

                        @Override
                        public void mapPositionUpdated(Component source, int zm, Coord center) {

                            if (zm == fzoom) {
                                final MapListener fthis = this;
                                Display.getInstance().callSerially(() -> {
                                    cnt.removeMapListener(fthis);
                                });

                                done[0] = true;
                                synchronized (done) {
                                    done.notify();
                                }
                            }
                        }

                    });
                    cnt.zoom(center, (int) zoom);
                    while (!done[0]) {
                        Display.getInstance().invokeAndBlock(() -> {
                            while (!done[0]) {
                                Util.wait(done, 100);
                            }
                        });
                    }
                    box = cnt.getBoundingBox();
                    System.out.println("Zoom now " + zoom);

                }
            } else if (box.contains(c1) && box.contains(c2)) {
                while (box.contains(c1) && box.contains(c2)) {
                    zoom += 1;
                    final boolean[] done = new boolean[1];

                    final int fzoom = (int) zoom;
                    cnt.addMapListener(new MapListener() {
                        public void mapPositionUpdated(Component source, int zm, Coord center) {
                            if (zm == fzoom) {
                                final MapListener fthis = this;
                                Display.getInstance().callSerially(() -> {
                                    cnt.removeMapListener(fthis);
                                });
                                done[0] = true;
                                synchronized (done) {
                                    done.notify();
                                }
                            }
                        }
                    });
                    cnt.zoom(center, (int) zoom);
                    while (!done[0]) {
                        Display.getInstance().invokeAndBlock(() -> {
                            while (!done[0]) {
                                Util.wait(done, 100);
                            }
                        });
                    }
                    box = cnt.getBoundingBox();

                }
                zoom -= 1;
                cnt.zoom(center, (int) zoom);
                cnt.addTapListener(null);
            }

        });
*/


       /*
        Button addLocation = $(new Button("Add Pin"))
                .addActionListener(e -> {
                    final String finalAddressTrue = finalAddress[0];
                    Coord coordinates = geocode(finalAddressTrue);
                    Double lng = coordinates.getLongitude();
                    Double lat = coordinates.getLatitude();
                    String formattedLng = lng.toString();
                    String formattedLat = lat.toString();
                    EncodedImage encImg = EncodedImage.createFromImage(markerImg, false);
                    cnt.addMarker(encImg, coordinates, "","", null);



                })
                .asComponent(Button.class);
*/


        /*Button testCoordPositions = $(new Button("Test Coords"))
                .addActionListener(e -> {
                    Coord topLeft = cnt.getCoordAtPosition(0, 0);
                    System.out.println("Top Left is " + topLeft + " -> " + cnt.getScreenCoordinate(topLeft) + " Should be (0,0)");
                    Coord bottomRight = cnt.getCoordAtPosition(cnt.getWidth(), cnt.getHeight());
                    System.out.println("Bottom right is " + bottomRight + " -> " + cnt.getScreenCoordinate(bottomRight) + " Should be " + cnt.getWidth() + ", " + cnt.getHeight());
                    Coord bottomLeft = cnt.getCoordAtPosition(0, cnt.getHeight());
                    System.out.println("Bottom Left is " + bottomLeft + " -> " + cnt.getScreenCoordinate(bottomLeft) + " Should be 0, " + cnt.getHeight());
                    Coord topRight = cnt.getCoordAtPosition(cnt.getWidth(), 0);
                    System.out.println("Top right is " + topRight + " -> " + cnt.getScreenCoordinate(topRight) + " Should be " + cnt.getWidth() + ", 0");
                    Coord center = cnt.getCoordAtPosition(cnt.getWidth() / 2, cnt.getHeight() / 2);
                    System.out.println("Center is " + center + " -> " + cnt.getScreenCoordinate(center) + ", should be " + (cnt.getWidth() / 2) + ", " + (cnt.getHeight() / 2));
                    EncodedImage encImg = EncodedImage.createFromImage(markerImg, false);
                    cnt.addMarker(encImg, topLeft, "Top Left", "Top Left", null);
                    cnt.addMarker(encImg, topRight, "Top Right", "Top Right", null);
                    cnt.addMarker(encImg, bottomRight, "Bottom Right", "Bottom Right", null);
                    cnt.addMarker(encImg, bottomLeft, "Bottom Left", "Bottom Left", null);
                    cnt.addMarker(encImg, center, "Center", "Center", null);


                })
                .asComponent(Button.class);
*/

        testCoordPositions.addActionListener(e ->
        {
            Coord c1 = new Coord(cnt.getCameraPosition());
            Coord c2 = new Coord(coordinates);

            Coord center = new Coord(c1.getLatitude()/2 +  c2.getLatitude() / 2, c1.getLongitude()/2 + c2.getLongitude()/2 );
            //  Coord center = new Coord(49.1110928, -122.9414646);


            float zoom = cnt.getZoom();

            boolean[] finished = new boolean[1];
            cnt.addMapListener(new MapListener() {

                @Override
                public void mapPositionUpdated(Component source, int zoom, Coord c) {

                    if (Math.abs(c.getLatitude() - center.getLatitude()) > .001 || Math.abs(c.getLongitude() - center.getLongitude()) > .001) {
                        return;
                    }
                    finished[0] = true;
                    synchronized (finished) {
                        final MapListener fthis = this;
                        Display.getInstance().callSerially(() -> {
                            cnt.removeMapListener(fthis);
                        });
                        finished.notify();
                    }

                }

            });
            cnt.zoom(center, (int) zoom);
            while (!finished[0]) {
                Display.getInstance().invokeAndBlock(() -> {
                    while (!finished[0]) {
                        Util.wait(finished, 100);
                    }
                });
            }


            BoundingBox box = cnt.getBoundingBox();
            if (!box.contains(c1) || !box.contains(c2)) {
                while (!box.contains(c1) || !box.contains(c2)) {
                    if (!box.contains(c1)) {
                        System.out.println("Box " + box + " doesn't contain " + c1);
                    }
                    if (!box.contains(c1)) {
                        System.out.println("Box " + box + " doesn't contain " + c2);
                    }
                    zoom -= 1;
                    final boolean[] done = new boolean[1];

                    final int fzoom = (int) zoom;
                    cnt.addMapListener(new MapListener() {

                        @Override
                        public void mapPositionUpdated(Component source, int zm, Coord center) {

                            if (zm == fzoom) {
                                final MapListener fthis = this;
                                Display.getInstance().callSerially(() -> {
                                    cnt.removeMapListener(fthis);
                                });

                                done[0] = true;
                                synchronized (done) {
                                    done.notify();
                                }
                            }
                        }

                    });
                    cnt.zoom(center, (int) zoom);
                    while (!done[0]) {
                        Display.getInstance().invokeAndBlock(() -> {
                            while (!done[0]) {
                                Util.wait(done, 100);
                            }
                        });
                    }
                    box = cnt.getBoundingBox();
                    System.out.println("Zoom now " + zoom);

                }
            } else if (box.contains(c1) && box.contains(c2)) {
                while (box.contains(c1) && box.contains(c2)) {
                    zoom += 1;
                    final boolean[] done = new boolean[1];

                    final int fzoom = (int) zoom;
                    cnt.addMapListener(new MapListener() {
                        public void mapPositionUpdated(Component source, int zm, Coord center) {
                            if (zm == fzoom) {
                                final MapListener fthis = this;
                                Display.getInstance().callSerially(() -> {
                                    cnt.removeMapListener(fthis);
                                });
                                done[0] = true;
                                synchronized (done) {
                                    done.notify();
                                }
                            }
                        }
                    });
                    cnt.zoom(center, (int) zoom);
                    while (!done[0]) {
                        Display.getInstance().invokeAndBlock(() -> {
                            while (!done[0]) {
                                Util.wait(done, 100);
                            }
                        });
                    }
                    box = cnt.getBoundingBox();

                }
                zoom -= 1;
                cnt.zoom(center, (int) zoom);
                cnt.addTapListener(null);
            }

        });
        Button toggleTopMargin = $(new Button("Toggle Margin"))
                .addActionListener(e -> {
                    int marginTop = $(cnt).getStyle().getMarginTop();
                    if (marginTop < Display.getInstance().getDisplayHeight() / 3) {
                        $(cnt).selectAllStyles().setMargin(Display.getInstance().getDisplayHeight() / 3, 0, 0, 0);
                    } else {
                        $(cnt).selectAllStyles().setMargin(0, 0, 0, 0);
                    }
                    $(cnt).getComponentForm().revalidate();
                })
                .asComponent(Button.class);


        Button btnClearAll = new Button("Clear All");
        btnClearAll.addActionListener(e -> {
            cnt.clearMapLayers();
        });

        MapContainer.MapObject mo = cnt.addMarker(EncodedImage.createFromImage(markerImg, false), new Coord(-33.866, 151.195), "test", "test", e -> {
            System.out.println("Marker clicked");
            cnt.removeMapObject(sydney);
        });
        sydney = mo;
        System.out.println("MO is " + mo);
        mo = cnt.addMarker(EncodedImage.createFromImage(markerImg, false), new Coord(-18.142, 178.431), "test", "test", e -> {
            System.out.println("Marker clicked");
        });
        System.out.println("MO is " + mo);
        cnt.addTapListener(e -> {
            if (tapDisabled) {
                return;
            }
            tapDisabled = true;
            TextField enterName = new TextField();
            Container wrapper = BoxLayout.encloseY(new Label("Name:"), enterName);
            InteractionDialog dlg = new InteractionDialog("Add Marker");
            dlg.getContentPane().add(wrapper);
            enterName.setDoneListener(e2 -> {
                String txt = enterName.getText();
                cnt.addMarker(EncodedImage.createFromImage(markerImg, false), cnt.getCoordAtPosition(e.getX(), e.getY()), enterName.getText(), "", e3 -> {
                    ToastBar.showMessage("You clicked " + txt, FontImage.MATERIAL_PLACE);
                });
                dlg.dispose();
                tapDisabled = false;
            });
            dlg.showPopupDialog(new Rectangle(e.getX(), e.getY(), 10, 100));
            enterName.startEditingAsync();
        });



// END TANAY MAPS



        //CREATE AC TEXTFIELD:

        if (HTML_API_KEY == null) {
            mapsform.add(new SpanLabel("This demo requires a valid google API key to be set in the constant apiKey, "
                    + "you can get this key for the webservice (not the native key) by following the instructions here: "
                    + "https://developers.google.com/places/web-service/get-api-key"));
            mapsform.getToolbar().addCommandToRightBar("Get Key", null, e -> Display.getInstance().execute("https://developers.google.com/places/web-service/get-api-key"));
            mapsform.show();
            return;
        }
        final DefaultListModel<String> options = new DefaultListModel<>();
        AutoCompleteTextField ac = new AutoCompleteTextField(options) {
            @Override
            protected boolean filter(String text) {
                if (text.length() == 0) {
                    return false;
                }
                String[] l = searchLocations(text);
                if (l == null || l.length == 0) {
                    return false;
                }

                options.removeAll();
                for (String s : l) {
                    options.addItem(s);
                }
                return true;
            }

        };

        ac.setMinimumElementsShownInPopup(5);
        Style so = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_SEARCH, so);
        Form placesAC = new Form("Autocomplete", new BoxLayout(BoxLayout.Y_AXIS));
        //  hi.getToolbar().addCommandToRightBar("", icon, (e) -> placesAC.show());
        String getAddress = new String();
        getAddress = ac.getText();
        System.out.println(getAddress);

        addLocation.addActionListener(e -> {

            finalAddress[0] = ac.getText();
            final String finalAddressTrue = finalAddress[0];
            coordinates = geocode(finalAddressTrue);
            Double lng = coordinates.getLongitude();
            Double lat = coordinates.getLatitude();
            String formattedLng = lng.toString();
            String formattedLat = lat.toString();
            EncodedImage encImg = EncodedImage.createFromImage(markerImg, false);
            cnt.addMarker(encImg, coordinates, "","", null);






        });

        panTo.addActionListener(evt -> {
            placesAC.show();

        });



        placesAC.add(ac);
        placesAC.add(addLocation);

        Button Back = $(new Button("Back"))
                .addActionListener(e2->{
                    mapsform.showBack();
                })
                .asComponent(Button.class);

        placesAC.add(Back);



        //END AC TEXTFIELD



        FloatingActionButton nextForm = FloatingActionButton.createFAB(FontImage.MATERIAL_ACCESS_ALARM);

        nextForm.addActionListener(e->{
            Form maps = new Form("Hello World");
            Button b1 = $(new Button("B1"))
                    .addActionListener(e2->{
                        // ToastBar.showMessage("B1 was pressed", FontImage.MATERIAL_3D_ROTATION);
                        placesAC.show();
                    })
                    .asComponent(Button.class);
            Button back = $(new Button("back"))
                    .addActionListener(e2->{
                        // ToastBar.showMessage("B1 was pressed", FontImage.MATERIAL_3D_ROTATION);
                        home.show();
                    })
                    .asComponent(Button.class);


            maps.add(b1).add(back);
            maps.show();
        });



        Container root = LayeredLayout.encloseIn(
                BorderLayout.center(nextForm.bindFabToContainer(cnt)),
                BorderLayout.south(
                        FlowLayout.encloseBottom(panTo, testCoordPositions, toggleTopMargin, btnMoveCamera, btnAddMarker, btnAddPath, btnClearAll )
                )
        );

        mapsform.add(BorderLayout.CENTER, root);
        mapsform.show();



        Form users = new Form("Welcome", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER_ABSOLUTE));
        team= new Peep[10];

        panela=new Container();
        panelb=new Container();
        panelba=new Container();
        panelbb=new Container();

        try {
            milton= Image.createImage("/mpic.jpg");
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        img= new Label("PIC"){
            @Override
            public void paint(Graphics g) {
                // red color
                //  g.setColor(0xff0000);
                g.drawImage(milton,this.getX(),this.getY(),this.getWidth(),this.getHeight());
                g.drawString("Hales", 10,10);

                // paint the screen in red
                // g.fillRect(getX(), getY(), 20,20);

                // draw users world in white text at the top left corner of the screen
                //  g.setColor(0xFF9933);
                if(x>0) {
                    g.drawString(team[0].first, (this.getWidth() / 2) - 20, getY() + this.getHeight() / 2);
                }
            }
        };
        first= new Label("FIRST");
        last= new Label("LAST");



        txtFirst = new TextField((""));
        txtLast = new TextField("");
        forward= new Button(("FORWARD"));
        Back = new Button ("BACK");
        make= new Button( "MAKE");
        panela.setLayout(new GridLayout(1,1));
        panela.add(img);


        panelba.setLayout(new GridLayout(2,2));
        panelba.add(first);
        panelba.add(txtFirst);
        panelba.add(last);
        panelba.add(txtLast);

        panelbb.setLayout(new GridLayout(1,3));
        panelbb.add(forward);
        panelbb.add(Back);
        panelbb.add(make);

        panelb.setLayout(new GridLayout(2,1));
        panelb.add(panelba);
        panelb.add(panelbb);

        users.setLayout(new GridLayout(2,1));

        users.addComponent(panela);
        users.addComponent(panelb);

        /*
        forward.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                System.out.println(txtFirst.getText()+txtLast.getText());
                team[x]= new Peep(txtFirst.getText(),txtLast.getText());
                x++;
            }
        });
*/
        make.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                System.out.println(txtFirst.getText()+txtLast.getText());
                team[x]= new Peep(txtFirst.getText(),txtLast.getText());
                x++;
            }
        });
        Back.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {

                x--;


                System.out.println(team[x].first+team[x].last);
                txtLast.setText(team[x].last);
                txtFirst.setText(team[x].first);
                img.repaint();

            }
        });
        forward.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent evt) {
                int h;
                h=x;
                x++;

                System.out.println(team[x].first+team[x].last);
                txtLast.setText(team[x].last);
                txtFirst.setText(team[x].first);
                img.repaint();
            }
        });



        users.show();

        Form hi = new Form("Native Maps Test");
        hi.setLayout(new BorderLayout());

        System.out.println("Read...");

        ReadParseJson x = new ReadParseJson();
        GoogleMapsTestApp e = new GoogleMapsTestApp();


        System.out.println(Arrays.toString(x.getArray()));




        //create and build the home Form
        home = new Form("Home", BoxLayout.y());
        home.add(new Label("PetBnB: AirBnB for Pets!"));
        home.add(b);
        b.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                main.show();
            }
        });
        home.add(new Button("Payment"));

        TextField txt = new TextField("", "Enter Pet Animal here:");
        home.add(txt)
                .add(new CheckBox("New Users in Your Area!"));

        RadioButton rb1 = new RadioButton("Bnb Area 2");
        RadioButton rb2 = new RadioButton("Bnb Area 3");
        rb1.setGroup("group");
        rb2.setGroup("group");

        home.addAll(rb1, rb2);

        final Slider a = new Slider();
        a.setText("50$");
        a.setProgress(50);
        a.setEditable(true);
        a.setRenderPercentageOnTop(true);
        home.add(a);

        Button b1 = new Button("WARNING: MUST READ");
        b1.addActionListener(evt -> Dialog.show("Warning!", "If Pet dies, it is not Bnb owner's responsibility", "Ok", "Cancel"));
        home.add(b1);



        Container paneluser = new Container(BoxLayout.y());
        System.out.println(Arrays.toString(x.getArray()));
        paneluser.add(Arrays.toString(x.getArray()));

        //Create Form1 and Form2 and set a Back Command to navigate back to the home Form
        Form form1 = new Form("Search For Stay");
        setBackCommand(form1);
        Form form2 = new Form("Help");
        setBackCommand(form2);
        Form form3 = new Form("Users");
        form3.add(paneluser);
        setBackCommand(form1);





        //Add navigation commands to the home Form
        NavigationCommand homeCommand = new NavigationCommand("Home");
        homeCommand.setNextForm(home);
        home.getToolbar().addCommandToSideMenu(homeCommand);

        NavigationCommand cmd1 = new NavigationCommand("Search For Stay");
        cmd1.setNextForm(mapsform);
        home.getToolbar().addCommandToSideMenu(cmd1);

        NavigationCommand cmd2 = new NavigationCommand("Help");
        cmd2.setNextForm(form2);
        home.getToolbar().addCommandToSideMenu(cmd2);
        NavigationCommand cmd3 = new NavigationCommand("Users");
        setBackCommand(form3);
        home.getToolbar().addCommandToSideMenu(cmd3);


        //Add Edit, Add and Delete Commands to the home Form context Menu
        Image im = FontImage.createMaterial(FontImage.MATERIAL_MODE_EDIT, UIManager.getInstance().getComponentStyle("Command"));
        Command edit = new Command("Edit", im) {

            @Override
            public void actionPerformed(ActionEvent evt) {
                System.out.println("Editing");

            }
        };
        home.getToolbar().addCommandToOverflowMenu(edit);

        im = FontImage.createMaterial(FontImage.MATERIAL_LIBRARY_ADD, UIManager.getInstance().getComponentStyle("Command"));
        Command add = new Command("Add", im) {

            @Override
            public void actionPerformed(ActionEvent evt) {
                System.out.println("Adding");
            }
        };
        home.getToolbar().addCommandToOverflowMenu(add);

        im = FontImage.createMaterial(FontImage.MATERIAL_DELETE, UIManager.getInstance().getComponentStyle("Command"));
        Command delete = new Command("Delete", im) {

            @Override
            public void actionPerformed(ActionEvent evt) {
                System.out.println("Deleting");
            }

        };
        home.getToolbar().addCommandToOverflowMenu(delete);


        home.show();


    }


    protected void setBackCommand(Form f) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                home.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }

    boolean tapDisabled = false;

    public void stop() {

        current = Display.getInstance().getCurrent();
    }

    public void destroy() {
    }

}