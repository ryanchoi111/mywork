package com.Hales.xmpparse;

import com.codename1.io.ConnectionRequest;
import com.codename1.io.JSONParser;
import com.codename1.io.NetworkManager;
import com.codename1.ui.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.xml.Element;
import com.codename1.xml.XMLParser;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class xmlP {

    private Form current;
    private Resources theme;
    private String meal= "http://flik.ma1geek.org/getMeals.php?date=2016-03-08";

    private Form home;

    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    public ArrayList testurl()
    {

        ConnectionRequest req2=new ConnectionRequest();
        req2.setUrl(meal);

        req2.setPost(false);
        req2.setHttpMethod("GET");
        NetworkManager.getInstance().addToQueueAndWait(req2);
        JSONParser parser = new JSONParser();


        Map result = null;
        LinkedHashMap dinner=null;
        try {

            result =  parser.parseJSON(new InputStreamReader(new ByteArrayInputStream(req2.getResponseData())));
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(result); // this is the map of the json string
        dinner= (LinkedHashMap) result.get("Lunch"); // you then pull a LinkedHashMap from the map

        ArrayList sides= (ArrayList)dinner.get("Vegetarian");
        return(sides);
      //  sides= (ArrayList<String>) dinner.get("Sides");





    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        ArrayList mysides;
        ArrayList<Meal> myMeals = new ArrayList<>();
       mysides= testurl();

        for(int x=0;x<mysides.size();x++) {
            //  System.out.println("ASIDE" + sides.get(x));
            LinkedHashMap sides2=(LinkedHashMap)mysides.get(x);
            String s = (String) sides2.get("mealName");

           // System.out.println("SIDE"+sides2.get("mealName"));
        }


        //create and build the home Form
        home = new Form("Home");
        home.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
        for(int x=0;x<mysides.size();x++) {
            //  System.out.println("ASIDE" + sides.get(x));
            LinkedHashMap sides2=(LinkedHashMap)mysides.get(x);
            String s = (String) sides2.get("mealName");
        //    home.add(new Label(s));
            myMeals.add(new Meal(s)); // this constucts a meal and adds it to myMeals

          //  TextArea lbl = new TextArea(s);
            TextArea lbl = new TextArea((myMeals.get(x)).name);

            lbl.setEditable(false);
           // lbl.setFocusable(false);
         //   lbl.setUIID("Label");
            home.addComponent(lbl);
            // System.out.println("SIDE"+sides2.get("mealName"));
        }


        home.show();
    }


    protected void setBackCommand(Form f) {
        Command back = new Command("") {

            @Override
            public void actionPerformed(ActionEvent evt) {
                home.showBack();
            }

        };
        Image img = FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand"));
        back.setIcon(img);
        f.getToolbar().addCommandToLeftBar(back);
        f.getToolbar().setTitleCentered(true);
        f.setBackCommand(back);
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
    }

    public void destroy() {
    }

}
